// This function must be defined globally to be accessible for inline HTML onclick events.
function navigate(page, context) {
    const newHash = context ? `${page}/${context}` : page;
    window.location.hash = newHash;
}

document.addEventListener('DOMContentLoaded', () => {

    // ===================================================================================
    // --- SUPABASE & GEMINI SETUP ---
    // ===================================================================================
    const SUPABASE_URL = 'YOUR_SUPABASE_URL';
    const SUPABASE_ANON_KEY = 'YOUR_SUPABASE_ANON_KEY';
    const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=`; // API Key is handled by the environment

    const { createClient } = supabase;
    const db = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

    // ===================================================================================
    // --- STATE MANAGEMENT ---
    // ===================================================================================
    let currentUser = null;
    let localUserProfile = null;
    let quizState = {};
    const chartInstances = {};
    const mainContainer = document.querySelector('main.container');

    // ===================================================================================
    // --- DATA ---
    // ===================================================================================
    const questions = [ { q: "Government intervention in the economy should be minimal.", effect: { econ: 10 } }, { q: "The means of production should belong to the workers who use them.", effect: { econ: -10 } }, { q: "Taxes on the wealthy should be increased to support the poor.", effect: { econ: -10 } }, { q: "The free market is the best way to allocate resources.", effect: { econ: 10 } }, { q: "Public utilities like water and electricity should be publicly owned.", effect: { econ: -8 } }, { q: "Environmental regulations are a burden on our economy.", effect: { econ: 7 } }, { q: "Abolishing the minimum wage would be good for the economy.", effect: { econ: 10 } }, { q: "The government should provide a universal basic income.", effect: { econ: -8 } }, { q: "Inheritance is a legitimate form of wealth.", effect: { econ: 8 } }, { q: "Large corporations have too much power.", effect: { econ: -7 } }, { q: "Government spending is almost always wasteful.", effect: { econ: 9 } }, { q: "Quality education and healthcare should be guaranteed for all.", effect: { econ: -10 } }, { q: "Tariffs are a necessary tool to protect domestic industries.", effect: { econ: 6, dipl: 5 } }, { q: "Land should not be a commodity to be bought and sold.", effect: { econ: -10 } }, { q: "It is more important to maintain a balanced budget than to fund social programs.", effect: { econ: 8 } }, { q: "Our nation's interests should always come first.", effect: { dipl: 10 } }, { q: "International cooperation is key to solving global problems.", effect: { dipl: -10 } }, { q: "A strong military is necessary for our nation's security.", effect: { dipl: 10, govt: 2 } }, { q: "We should be more open to immigration.", effect: { dipl: -8 } }, { q: "Our country should intervene in foreign conflicts to promote our values.", effect: { dipl: 5 } }, { q: "International aid is a waste of our country's money.", effect: { dipl: 10 } }, { q: "Maintaining our national sovereignty is of utmost importance.", effect: { dipl: 10 } }, { q: "I am proud of my country's history and culture.", effect: { dipl: 8 } }, { q: "The United Nations should have more power.", effect: { dipl: -10 } }, { q: "Borders should eventually be abolished.", effect: { dipl: -10 } }, { q: "My nation's values are superior to others.", effect: { dipl: 9 } }, { q: "It is important to maintain our alliance with other nations.", effect: { dipl: -6 } }, { q: "We should reduce our military spending.", effect: { dipl: -8 } }, { q: "Refugees should be welcomed into our country.", effect: { dipl: -7 } }, { q: "Globalization has been more of a curse than a blessing.", effect: { dipl: 8 } }, { q: "Individual liberties must be protected, even if it compromises safety.", effect: { govt: -10 } }, { q: "Law enforcement should have more power to stop crime.", effect: { govt: 10 } }, { q: "Government surveillance is a necessary evil.", effect: { govt: 10 } }, { q: "Freedom of speech should have limits to prevent hate speech.", effect: { govt: 5 } }, { q: "The possession of firearms should be strictly regulated.", effect: { govt: 7 } }, { q: "A state of emergency can justify suspending democratic rights.", effect: { govt: 10 } }, { q: "All forms of consensual activity between adults should be legal.", effect: { govt: -10 } }, { q: "There is no such thing as a victimless crime.", effect: { govt: 8 } }, { q: "The state should have no say in personal matters.", effect: { govt: -10 } }, { q: "A strong, decisive leader is better than a democratic process.", effect: { govt: 10 } }, { q: "Censorship of art and media is never acceptable.", effect: { govt: -9 } }, { q: "Drug use should be treated as a public health issue, not a crime.", effect: { govt: -8 } }, { q: "The death penalty should be an option for the most serious crimes.", effect: { govt: 10 } }, { q: "Protests should be restricted to designated areas.", effect: { govt: 7 } }, { q: "State authority should be questioned.", effect: { govt: -8 } }, { q: "Traditional family values should be preserved.", effect: { scty: 10 } }, { q: "Scientific progress should not be limited by religious beliefs.", effect: { scty: -10 } }, { q: "Marriage should be strictly between a man and a woman.", effect: { scty: 10 } }, { q: "Societal change is happening too quickly.", effect: { scty: 8 } }, { q: "Religion should play a role in public life.", effect: { scty: 9 } }, { q: "We should embrace new technologies and lifestyles.", effect: { scty: -8 } }, { q: "Gender is a social construct.", effect: { scty: -10 } }, { q: "It is important to maintain our cultural traditions.", effect: { scty: 10 } }, { q: "Abortion should be legal and accessible.", effect: { scty: -10 } }, { q: "Children should be taught to respect authority.", effect: { scty: 7, govt: 3 } }, { q: "Astrology is a legitimate way of understanding the world.", effect: { scty: 8 } }, { q: "Technological automation is something to be feared.", effect: { scty: 6 } }, { q: "Multiculturalism is a strength for a society.", effect: { scty: -9 } }, { q: "Societal norms and institutions should be upheld.", effect: { scty: 10 } }, { q: "The past was better than the present.", effect: { scty: 8 } } ];
    const ideologies = [ { name: "Anarcho-Communism", scores: { econ: -100, dipl: -50, govt: -100, scty: -50 } }, { name: "Libertarian Socialism", scores: { econ: -80, dipl: -30, govt: -80, scty: -30 } }, { name: "Social Democracy", scores: { econ: -60, dipl: 0, govt: -30, scty: -20 } }, { name: "Centrism", scores: { econ: 0, dipl: 0, govt: 0, scty: 0 } }, { name: "Social Liberalism", scores: { econ: -30, dipl: -20, govt: -50, scty: -40 } }, { name: "Classical Liberalism", scores: { econ: 60, dipl: 20, govt: -60, scty: 10 } }, { name: "Libertarianism", scores: { econ: 80, dipl: -20, govt: -90, scty: 0 } }, { name: "Anarcho-Capitalism", scores: { econ: 100, dipl: -50, govt: -100, scty: 0 } }, { name: "Nationalism", scores: { econ: 20, dipl: 80, govt: 30, scty: 40 } }, { name: "Conservatism", scores: { econ: 40, dipl: 40, govt: 50, scty: 60 } }, { name: "Fascism", scores: { econ: 40, dipl: 90, govt: 90, scty: 80 } }, { name: "State Socialism", scores: { econ: -80, dipl: 0, govt: 80, scty: -20 } }, { name: "Authoritarian Capitalism", scores: { econ: 70, dipl: 60, govt: 80, scty: 30 } }, ];
    const badges = [ { id: 'quiz_taker', name: 'Initiate', desc: 'Complete the quiz for the first time.', emoji: '🎓', criteria: () => true }, { id: 'centrist', name: 'True Centrist', desc: 'Score between 45% and 55% on all four axes.', emoji: '⚖️', criteria: r => Object.values(r).every(v => v >= 45 && v <= 55) }, { id: 'anarchist', name: 'Black Flag', desc: 'Score less than 15% on the Civil axis (highly libertarian).', emoji: '🏴', criteria: r => r.govt < 15 }, { id: 'authoritarian', name: 'Iron Fist', desc: 'Score more than 85% on the Civil axis (highly authoritarian).', emoji: '✊', criteria: r => r.govt > 85 }, { id: 'communist', name: 'Red Star', desc: 'Score less than 15% on the Economic axis (highly collectivist).', emoji: '☭', criteria: r => r.econ < 15 }, { id: 'capitalist', name: 'Bull Market', desc: 'Score more than 85% on the Economic axis (highly market-focused).', emoji: '📈', criteria: r => r.econ > 85 }, { id: 'globalist', name: 'One World', desc: 'Score less than 15% on the Diplomatic axis (highly globalist).', emoji: '🌍', criteria: r => r.dipl < 15 }, { id: 'nationalist', name: 'For the Nation', desc: 'Score more than 85% on the Diplomatic axis (highly nationalist).', emoji: '🚩', criteria: r => r.dipl > 85 }, ];
    const DAILY_QUESTIONS = [ { q: "Should the government regulate major tech companies more strictly?", axis: 'govt', effect: 8 }, { q: "Is a wealth tax a fair way to address inequality?", axis: 'econ', effect: -10 }, { q: "Should our country prioritize renewable energy over fossil fuels, even if it costs more?", axis: 'scty', effect: -8 }, { q: "Is patriotism a virtue that should be promoted in schools?", axis: 'dipl', effect: 8 } ];
    const analysisKeywords = { agree: ['agree', 'support', 'believe', 'yes', 'should', 'necessary', 'important', 'essential', 'good', 'correct', 'right', 'pro', 'favor'], disagree: ['disagree', 'oppose', 'against', 'no', 'should not', 'unnecessary', 'harmful', 'bad', 'wrong', 'con', 'reject'], strong: ['strongly', 'definitely', 'absolutely', 'must', 'always', 'very', 'completely', 'undoubtedly'], weak: ['somewhat', 'partially', 'maybe', 'perhaps', 'could', 'but', 'however', 'on the other hand', 'depends', 'if', 'sometimes', 'to an extent'], };
    
    // ===================================================================================
    // --- TEMPLATES FOR DYNAMIC HTML ---
    // ===================================================================================
    const templates = {
        home: () => `<h1>Welcome to The Spectrum</h1><p>More than just a quiz. Discover your ideology, track its evolution, earn rewards, and discuss your views with the community.</p><div id="daily-quiz-prompt" class="hidden"><h3>Daily Question <span id="daily-streak"></span></h3><p>Earn XP and keep your streak going!</p><button class="big-btn" data-page="daily-quiz">Take Today's Quiz</button></div><div id="activity-feed"><h3>Recent Activity</h3><div id="feed-content"><div class="spinner-container"><div class="spinner"></div></div></div></div><button class="big-btn" data-page="quiz">Take the Full Assessment</button>`,
        quiz: () => `<div id="progress-container"><div id="progress-bar"></div></div><h2 id="question-title"></h2><p id="question-text"></p><div id="standard-answers"><button class="answer-btn btn-sa" data-value="1.5">Strongly Agree</button><button class="answer-btn btn-a" data-value="1.0">Agree</button><button class="answer-btn btn-n" data-value="0.0">Neutral / Unsure</button><button class="answer-btn btn-d" data-value="-1.0">Disagree</button><button class="answer-btn btn-sd" data-value="-1.5">Strongly Disagree</button></div><div id="formulate-prompt"><div class="prompt-arrow">➤</div><span class="prompt-button">Having trouble? Write it in your own words</span></div><div id="formulate-input-area" class="hidden"><p>Explain your position in your own words. The AI will determine your stance.</p><textarea id="custom-answer-text" rows="4"></textarea><button id="submit-custom-btn">Submit My Formulation</button></div>`,
        results: (type, content) => `<h1>${type === 'daily' ? 'Daily Result' : 'Your Results'}</h1>${content}`,
        profile: () => `<div id="profile-header"><div id="profile-header-content"><div id="profile-gif-container"></div><div><h2 id="profile-username"></h2><div id="friend-button-container"></div></div></div></div><div class="profile-stats"><div id="level-display"></div><div class="xp-bar-container"><div id="xp-bar"></div><span id="xp-text"></span></div></div><h3>Latest Result</h3><div id="profile-results-container"></div><h3>Ideological Journey</h3><div id="history-chart-container"></div><h3>Friends</h3><div id="friends-list"></div>`,
        settings: () => `<h1>Settings</h1><div class="setting-item"><label>Theme</label><div class="toggle-switch"><span>Light</span><label class="switch"><input type="checkbox" id="theme-toggle"><span class="slider"></span></label><span>Dark</span></div></div><div class="setting-item"><label for="ads-toggle">Show Advertisements</label><label class="switch"><input type="checkbox" id="ads-toggle"><span class="slider"></span></label></div><div id="profile-customization" class="hidden"><h2>Profile Customization</h2><div class="setting-item"><label for="banner-color-picker">Profile Banner Color (Lvl 5+)</label><input type="color" id="banner-color-picker"></div><div class="setting-item"><label for="profile-gif-input">Profile GIF URL (Lvl 20+)</label><input type="text" id="profile-gif-input" placeholder="https://example.com/image.gif"></div><button id="save-customization-btn">Save Customizations</button></div><div id="account-actions"><h2>Account</h2><button id="change-password-btn">Change Password</button></div>`,
        forums: () => `<h1>Forums & AI Chat</h1><div class="forum-tabs"><button class="tab-link active" data-tab="forum-main">Discussions</button><button class="tab-link" data-tab="ai-chat">🤖 AI Advisor</button></div><div id="forum-main" class="tab-content active"><p>A place for discussion. Posts are public.</p><div id="forum-threads"></div></div><div id="ai-chat" class="tab-content hidden"><p>Ask our AI Political Advisor anything about political concepts, history, or ideologies.</p><div id="ai-chat-box"><div class="ai-chat-message ai">Hello! Ask me any political question.</div></div><form id="ai-chat-form"><input type="text" id="ai-chat-input" placeholder="e.g., 'What is Keynesian economics?'" required><button type="submit">Send</button></form></div>`,
        community: () => `<h1>Community</h1><p>Find other users on The Spectrum.</p><input type="text" id="user-search" placeholder="Search for a username..."><div id="user-list"></div>`
    };

    // ===================================================================================
    // --- INITIALIZATION & ROUTING ---
    // ===================================================================================
    async function init() {
        attachEventListeners();
        db.auth.onAuthStateChange(async (event, session) => {
            const previousUser = currentUser?.id;
            await handleAuthChange(session);
            if (event === "PASSWORD_RECOVERY") showModal('change-password-modal');
            else if ((event === "SIGNED_IN" && previousUser !== session?.user?.id) || event === "SIGNED_OUT") navigate('home');
        });
        const { data: { session } } = await db.auth.getSession();
        await handleAuthChange(session);
        applySettings();
        handleRouteChange();
        window.addEventListener('hashchange', handleRouteChange);
    }

    function handleRouteChange() { const hash = window.location.hash || '#home'; const [page, context] = hash.substring(1).split('/'); renderPage(page, context); }

    // ===================================================================================
    // --- PAGE & MODAL RENDERING ---
    // ===================================================================================
    async function renderPage(pageId, context = null) {
        if (!pageId || !templates[pageId]) pageId = 'home';
        mainContainer.innerHTML = `<div class="spinner-container"><div class="spinner"></div></div>`;
        try {
            mainContainer.innerHTML = templates[pageId]();
            switch(pageId) {
                case 'home': await loadHomePage(); break;
                case 'quiz': startQuiz('full'); break;
                case 'daily-quiz': startQuiz('daily'); break;
                case 'profile': await loadProfilePage(context); break;
                case 'forums': await loadForums(); break;
                case 'settings': loadSettingsPage(); break;
                case 'community': await loadCommunityPage(); break;
            }
        } catch (error) { console.error("Error rendering page:", error); showToast("Failed to load page content.", "error"); mainContainer.innerHTML = `<h1>Error</h1><p>Something went wrong. Please try refreshing the page.</p>`; }
        updateAuthState();
    }
    
    function showModal(modalId) { document.getElementById('modal-backdrop').classList.remove('hidden'); document.getElementById(modalId).classList.remove('hidden'); }
    function hideModals() { document.getElementById('modal-backdrop').classList.add('hidden'); document.querySelectorAll('.modal').forEach(m => { m.classList.add('hidden'); const errorMsg = m.querySelector('.error-msg'); if(errorMsg) errorMsg.textContent = ''; }); }
    
    // --- PAGE-SPECIFIC LOADERS ---
    async function loadHomePage() { if (currentUser && localUserProfile) { const streakEl = document.getElementById('daily-streak'); streakEl.textContent = localUserProfile.daily_streak > 0 ? `🔥 ${localUserProfile.daily_streak}` : ''; document.getElementById('daily-quiz-prompt').classList.remove('hidden'); } await loadActivityFeed(); }
    async function loadProfilePage(userIdToView) { const profileId = userIdToView || (currentUser ? currentUser.id : null); if (!profileId) { navigate('home'); return; } mainContainer.innerHTML = templates.profile(); const [profileData, resultsData, friendsData] = await Promise.all([fetchUserProfile(profileId), fetchUserResults(profileId), fetchUserFriends(profileId)]); if (!profileData) { mainContainer.innerHTML = "<h1>User not found.</h1>"; return; } document.getElementById('profile-header').style.backgroundColor = profileData.banner_color; document.getElementById('profile-gif-container').innerHTML = profileData.profile_gif_url ? `<img src="${profileData.profile_gif_url}" alt="Profile GIF">` : '🖼️'; document.getElementById('profile-username').textContent = profileData.username; updateLevelAndXp(profileData.xp); const resultsContainer = document.getElementById('profile-results-container'); if (resultsData && resultsData.length > 0) { const latestResult = resultsData[0]; const percentages = {econ: latestResult.econ_score, dipl: latestResult.dipl_score, govt: latestResult.govt_score, scty: latestResult.scty_score}; resultsContainer.innerHTML = `<canvas id="profileChart"></canvas><h4>Closest Match: <span>${latestResult.ideology_name}</span></h4>`; setTimeout(() => renderRadarChart(document.getElementById('profileChart'), percentages, 'profileChart'), 50); } else { resultsContainer.innerHTML = `<div class="empty-state"><p>This user has not completed the quiz yet.</p></div>`; } const historyContainer = document.getElementById('history-chart-container'); if (resultsData && resultsData.length > 1) { historyContainer.innerHTML = `<canvas id="historyChart"></canvas>`; setTimeout(() => renderHistoryChart(document.getElementById('historyChart'), resultsData), 50); } else { historyContainer.innerHTML = `<div class="empty-state"><p>Take the quiz more than once to see your ideological journey graphed here.</p></div>`; } const friendBtnContainer = document.getElementById('friend-button-container'); if (currentUser && currentUser.id !== profileId) { const isFriend = await checkFriendship(currentUser.id, profileId); friendBtnContainer.innerHTML = `<button id="add-friend-btn" data-isfriend="${isFriend}" data-userid="${profileId}">${isFriend ? 'Remove Friend' : 'Add Friend'}</button>`; document.getElementById('add-friend-btn').addEventListener('click', handleFriendAction); } const friendsListContainer = document.getElementById('friends-list'); if (friendsData && friendsData.length > 0) { friendsListContainer.innerHTML = '<h4>Friends</h4>' + friendsData.map(friend => `<div class="user-card" onclick="navigate('profile', '${friend.id}')">${friend.username}</div>`).join(''); } else { friendsListContainer.innerHTML = `<div class="empty-state"><p>No friends yet. Find some in the <a href="#community">Community</a> tab!</p></div>`; } }
    function loadSettingsPage() { const settings = getSettings(); document.getElementById('theme-toggle').checked = settings.theme === 'dark'; document.getElementById('ads-toggle').checked = settings.adsEnabled; document.getElementById('theme-toggle').addEventListener('change', handleThemeToggle); document.getElementById('ads-toggle').addEventListener('change', handleAdsToggle); const customizationDiv = document.getElementById('profile-customization'); if (currentUser) { customizationDiv.classList.remove('hidden'); const level = calculateLevel(localUserProfile.xp); const colorPicker = document.getElementById('banner-color-picker'); colorPicker.value = localUserProfile.banner_color || '#3b3b47'; colorPicker.disabled = level < 5; const gifInput = document.getElementById('profile-gif-input'); gifInput.value = localUserProfile.profile_gif_url || ''; gifInput.disabled = level < 20; document.getElementById('save-customization-btn').addEventListener('click', saveProfileCustomizations); document.getElementById('change-password-btn').addEventListener('click', () => showModal('change-password-modal')); document.getElementById('change-password-form').addEventListener('submit', handleChangePassword); } else { customizationDiv.classList.add('hidden'); document.getElementById('account-actions').classList.add('hidden');} }
    async function loadForums() { document.getElementById('ai-chat-form').addEventListener('submit', handleAIChatSubmit); document.querySelectorAll('.tab-link').forEach(tab => tab.addEventListener('click', () => { document.querySelectorAll('.tab-link, .tab-content').forEach(el => el.classList.remove('active')); tab.classList.add('active'); document.getElementById(tab.dataset.tab).classList.add('active'); })); const threadsContainer = document.getElementById('forum-threads'); const threads = [ { id: 1, title: 'Debate: Universal Basic Income' }]; threadsContainer.innerHTML = threads.map(t => ` <div class="forum-thread" id="thread-${t.id}"> <div class="thread-header"><h4>${t.title}</h4></div> <div class="thread-posts"></div> <div class="reply-area"> <textarea placeholder="Write a reply..."></textarea> <button data-thread-id="${t.id}">Post Reply</button> </div> </div>`).join(''); threads.forEach(t => { const posts = JSON.parse(localStorage.getItem(`forum_thread_${t.id}`)) || [{author: 'Admin', content: 'Be the first to post!'}]; const postsContainer = document.querySelector(`#thread-${t.id} .thread-posts`); postsContainer.innerHTML = posts.map(p => `<div class="post"><span class="post-author">${p.author}:</span><span class="post-content">${p.content}</span></div>`).join(''); }); document.getElementById('forum-threads').addEventListener('click', e => { if (e.target.tagName === 'BUTTON' && e.target.dataset.threadId) { const content = e.target.previousElementSibling.value; if (!content.trim()) return; handlePostReply(e.target.dataset.threadId, content); e.target.previousElementSibling.value = ''; } });}
    async function loadCommunityPage() { const userList = document.getElementById('user-list'); userList.innerHTML = `<div class="spinner-container"><div class="spinner"></div></div>`; const { data, error } = await db.from('profiles').select('id, username, xp').order('xp', { ascending: false }).limit(20); if (error) { userList.innerHTML = `<p class="error-msg">Could not load users.</p>`; return; } userList.innerHTML = data.map(user => `<div class="user-card" onclick="navigate('profile', '${user.id}')"><span class="user-card-info">${user.username} (Lvl ${calculateLevel(user.xp)})</span><span>View Profile</span></div>`).join(''); document.getElementById('user-search').addEventListener('input', async (e) => { const searchTerm = e.target.value; if (searchTerm.length < 2) return; const { data } = await db.from('profiles').select('id, username, xp').ilike('username', `%${searchTerm}%`); userList.innerHTML = data.map(user => `<div class="user-card" onclick="navigate('profile', '${user.id}')"><span class="user-card-info">${user.username} (Lvl ${calculateLevel(user.xp)})</span><span>View Profile</span></div>`).join(''); }); }
    async function loadActivityFeed() { const feedContent = document.getElementById('feed-content'); const { data, error } = await db.from('quiz_results').select(`user_id, ideology_name, profiles(username)`).order('created_at', { ascending: false }).limit(5); if (error || !data || !data.length) { feedContent.innerHTML = `<div class="empty-state"><p>No recent activity. Be the first to take the quiz!</p></div>`; return; } feedContent.innerHTML = data.map(item => `<div class="post"><a href="#profile/${item.user_id}" class="post-author">${item.profiles.username}</a> completed the quiz and is a ${item.ideology_name}.</div>`).join(''); }

    // --- QUIZ LOGIC ---
    function startQuiz(type) { quizState = { lastAnswers: [], promptTimerId: null, type, currentQuestionIndex: 0, scores: { econ: 0, dipl: 0, govt: 0, scty: 0 }, maxScores: { econ: 0, dipl: 0, govt: 0, scty: 0 } }; const quizContainer = mainContainer.querySelector('.page.active'); if (type === 'daily') { const today = new Date().toISOString().slice(0, 10); if (currentUser && localUserProfile.last_daily_completion === today) { quizContainer.innerHTML = `<h1>Daily Quiz</h1><p>You've already completed the quiz for today! Come back tomorrow.</p>`; return; } const questionIndex = new Date().getDate() % DAILY_QUESTIONS.length; quizState.questions = [DAILY_QUESTIONS[questionIndex]]; quizState.xpReward = 10 + (currentUser ? localUserProfile.daily_streak * 2 : 0); } else { quizState.questions = questions; quizState.xpReward = 100; } quizState.questions.forEach(q => { for (const axis in q.effect) { quizState.maxScores[axis] += Math.abs(q.effect[axis]); } }); attachQuizListeners(); loadQuestion(); }
    function attachQuizListeners() { const quizContainer = mainContainer.querySelector('.page.active'); if (!quizContainer) return; quizContainer.addEventListener('click', e => { const target = e.target; if (target.matches('.answer-btn')) handleAnswer(parseFloat(target.dataset.value)); if (target.closest('#formulate-prompt')) toggleFormulateUI(); if (target.matches('#submit-custom-btn')) handleCustomAnswer(); }); }
    function loadQuestion() { if (quizState.promptTimerId) clearTimeout(quizState.promptTimerId); if (quizState.currentQuestionIndex >= quizState.questions.length) { showResults(); return; } const quizContainer = mainContainer.querySelector('.page.active'); resetFormulateUI(quizContainer); const question = quizState.questions[quizState.currentQuestionIndex]; quizContainer.querySelector('#question-title').textContent = `Question ${quizState.currentQuestionIndex + 1} of ${quizState.questions.length}`; quizContainer.querySelector('#question-text').textContent = question.q; updateProgressBar(); const promptEl = quizContainer.querySelector('#formulate-prompt'); if (promptEl) { promptEl.classList.add('hidden'); quizState.promptTimerId = setTimeout(() => promptEl.classList.remove('hidden'), 30000); } }
    function handleAnswer(multiplier) { if (quizState.promptTimerId) clearTimeout(quizState.promptTimerId); quizState.lastAnswers.push(multiplier); if (quizState.lastAnswers.length > 5) quizState.lastAnswers.shift(); const allSame = quizState.type === 'full' && quizState.lastAnswers.length === 5 && quizState.lastAnswers.every(a => a === quizState.lastAnswers[0]); if (allSame) { showCaptcha(); return; } processAnswer(multiplier); }
    function processAnswer(multiplier) { if (quizState.type === 'daily') { const question = quizState.questions[0]; quizState.scores[question.axis] = question.effect * multiplier; } else { const question = quizState.questions[quizState.currentQuestionIndex]; for (const axis in question.effect) { quizState.scores[axis] += question.effect[axis] * multiplier; } } quizState.currentQuestionIndex++; loadQuestion(); }
    async function showResults() { let content = ''; quizState.percentages = {}; if (quizState.type === 'daily') { const question = quizState.questions[0]; const axisScore = quizState.scores[question.axis]; let resultText = "You were neutral on the topic."; if ((axisScore > 0 && question.effect > 0) || (axisScore < 0 && question.effect < 0)) resultText = "You leaned towards agreeing with the statement."; if ((axisScore < 0 && question.effect > 0) || (axisScore > 0 && question.effect < 0)) resultText = "You leaned towards disagreeing with the statement."; content = `<p>${resultText}</p><p>You earned ${quizState.xpReward} XP!</p>`; } else { for (const axis in quizState.scores) { quizState.percentages[axis] = quizState.maxScores[axis] === 0 ? 50 : 50 + 50 * (quizState.scores[axis] / quizState.maxScores[axis]); } const closestIdeology = findClosestIdeology(quizState.percentages); content = createResultsHTML(closestIdeology); setTimeout(() => { renderRadarChart(document.getElementById('resultsChart'), quizState.percentages, 'resultsChart'); renderAxisDetails(quizState.percentages); document.getElementById('explain-btn').addEventListener('click', handleExplainIdeology); if (currentUser) { const saveBtn = document.getElementById('save-results-btn'); saveBtn.classList.remove('hidden'); saveBtn.onclick = () => saveFullQuizResults(saveBtn, quizState.percentages, closestIdeology); } }, 50); } if (currentUser) await addXp(quizState.xpReward); if (quizState.type === 'daily' && currentUser) await updateDailyStreak(); mainContainer.innerHTML = templates.results(quizState.type, content); }
    async function saveFullQuizResults(button, percentages, ideology) { if (!currentUser) return; showButtonSpinner(button); const { error } = await db.from('quiz_results').insert({ user_id: currentUser.id, econ_score: percentages.econ, dipl_score: percentages.dipl, govt_score: percentages.govt, scty_score: percentages.scty, ideology_name: ideology.name }); hideButtonSpinner(button, 'Save Results to Profile'); if (error) { showToast('Error saving results.', 'error'); console.error(error); } else { button.textContent = 'Saved!'; button.disabled = true; showToast('Results saved to your profile!', 'success'); } }

    // --- AUTHENTICATION & PROFILE HANDLERS ---
    async function handleAuthChange(session) { if (session) { currentUser = session.user; localUserProfile = await fetchUserProfile(currentUser.id); if (!localUserProfile && currentUser.user_metadata.username) { const { data, error } = await db.from('profiles').insert({ id: currentUser.id, username: currentUser.user_metadata.username }).select().single(); if (error) console.error("Error creating profile:", error); else localUserProfile = data; } } else { currentUser = null; localUserProfile = null; } updateAuthState(); }
    async function handleLogin(e) { e.preventDefault(); const btn = e.target.querySelector('button'); showButtonSpinner(btn); const email = document.getElementById('login-email').value; const pass = document.getElementById('login-pass').value; const { error } = await db.auth.signInWithPassword({ email, password: pass }); hideButtonSpinner(btn, 'Log In'); if (error) document.getElementById('login-error').textContent = error.message; }
    async function handleRegister(e) { e.preventDefault(); const btn = e.target.querySelector('button'); showButtonSpinner(btn); const email = document.getElementById('register-email').value; const user = document.getElementById('register-user').value; const pass = document.getElementById('register-pass').value; if (pass.length < 6) { document.getElementById('register-error').textContent = 'Password must be at least 6 characters.'; hideButtonSpinner(btn, 'Create Account'); return; } const { data, error } = await db.auth.signUp({ email, password: pass, options: { data: { username: user } } }); hideButtonSpinner(btn, 'Create Account'); if (error) { document.getElementById('register-error').textContent = error.message; } else { hideModals(); showToast("Registration successful! Please check your email to confirm your account.", "success"); } }
    async function logout() { await db.auth.signOut(); }
    function handleForgotPasswordLink(e) { e.preventDefault(); hideModals(); showModal('forgot-password-modal'); }
    async function handleForgotPasswordSubmit(e) { e.preventDefault(); const btn = e.target.querySelector('button'); showButtonSpinner(btn); const email = document.getElementById('forgot-email').value; const { error } = await db.auth.resetPasswordForEmail(email, { redirectTo: window.location.origin }); const successMsg = document.getElementById('forgot-success'); successMsg.classList.remove('hidden'); successMsg.textContent = "If an account with that email exists, a reset link has been sent."; if (error) console.log("Reset Error (not shown to user):", error); hideButtonSpinner(btn, 'Send Reset Link'); }
    async function handleChangePassword(e) { e.preventDefault(); const btn = e.target.querySelector('button'); showButtonSpinner(btn); const pass = document.getElementById('change-pass').value; if (pass.length < 6) { document.getElementById('change-password-error').textContent = 'Password must be at least 6 characters.'; hideButtonSpinner(btn, 'Update Password'); return; } const { error } = await db.auth.updateUser({ password: pass }); hideButtonSpinner(btn, 'Update Password'); if (error) { document.getElementById('change-password-error').textContent = error.message; } else { showToast("Password updated successfully!", "success"); hideModals(); } }
    function handleThemeToggle(e) { const newSettings = getSettings(); newSettings.theme = e.target.checked ? 'dark' : 'light'; saveSettings(newSettings); applySettings(); }
    function handleAdsToggle(e) { const newSettings = getSettings(); newSettings.adsEnabled = e.target.checked; saveSettings(newSettings); applySettings(); }
    async function saveProfileCustomizations(e) { if (!localUserProfile) return; const btn = e.target; showButtonSpinner(btn); const updates = { banner_color: document.getElementById('banner-color-picker').value, profile_gif_url: document.getElementById('profile-gif-input').value }; const { data, error } = await db.from('profiles').update(updates).eq('id', currentUser.id); hideButtonSpinner(btn, 'Save Customizations'); if (!error) { localUserProfile = { ...localUserProfile, ...updates }; showToast("Profile updated!", "success"); } else { showToast("Error updating profile.", "error"); } }
    async function handleFriendAction(e) { const target = e.target; const isFriend = target.dataset.isfriend === 'true'; const friendId = target.dataset.userid; showButtonSpinner(target); if (isFriend) { const { error } = await db.from('friends').delete().match({ user_id_1: currentUser.id, user_id_2: friendId }); if (!error) { target.textContent = 'Add Friend'; target.dataset.isfriend = 'false'; showToast("Friend removed.", "success"); } } else { const { error } = await db.from('friends').insert({ user_id_1: currentUser.id, user_id_2: friendId }); if (!error) { target.textContent = 'Remove Friend'; target.dataset.isfriend = 'true'; showToast("Friend added!", "success"); } } hideButtonSpinner(target, target.textContent); }
    function handleCustomAnswer() { const text = mainContainer.querySelector('#custom-answer-text').value; if (!text.trim()) return; const multiplier = analyzeText(text); handleAnswer(multiplier); }
    function handlePostReply(threadId, content) { const posts = JSON.parse(localStorage.getItem(`forum_thread_${threadId}`)) || []; const newPost = { author: localUserProfile ? localUserProfile.username : 'Guest', content: content.trim() }; posts.push(newPost); localStorage.setItem(`forum_thread_${threadId}`, JSON.stringify(posts)); loadForums(); }

    // --- GEMINI API HANDLERS ---
    async function handleExplainIdeology(e) {
        const button = e.target;
        const ideologyName = button.dataset.ideology;
        const explanationDiv = document.getElementById('ideology-explanation');

        showButtonSpinner(button);
        explanationDiv.innerHTML = `<div class="spinner-container"><div class="spinner"></div></div>`;
        explanationDiv.classList.remove('hidden');

        const prompt = `Explain the political ideology "${ideologyName}" in a simple, neutral, and concise paragraph.`;
        const resultText = await callGeminiAPI(prompt);

        explanationDiv.innerHTML = resultText || "<p class='error-msg'>Could not get explanation.</p>";
        hideButtonSpinner(button, "✨ Explain My Ideology");
    }

    async function handleAIChatSubmit(e) {
        e.preventDefault();
        const form = e.target;
        const input = form.querySelector('input');
        const button = form.querySelector('button');
        const chatBox = document.getElementById('ai-chat-box');
        const userMessage = input.value;

        if (!userMessage.trim()) return;

        // Display user message
        chatBox.innerHTML += `<div class="ai-chat-message user">${userMessage}</div>`;
        chatBox.scrollTop = chatBox.scrollHeight;
        input.value = '';
        showButtonSpinner(button);

        // Call Gemini API
        const systemPrompt = "You are a neutral, helpful political science advisor. Answer the user's question clearly and concisely, without taking a side.";
        const resultText = await callGeminiAPI(userMessage, systemPrompt);

        // Display AI response
        const aiMessage = resultText || "Sorry, I couldn't process that request.";
        chatBox.innerHTML += `<div class="ai-chat-message ai">${aiMessage}</div>`;
        chatBox.scrollTop = chatBox.scrollHeight;
        hideButtonSpinner(button, "Send");
    }

    async function callGeminiAPI(prompt, systemPrompt = null) {
        const payload = {
            contents: [{ parts: [{ text: prompt }] }],
        };

        if (systemPrompt) {
            payload.systemInstruction = { parts: [{ text: systemPrompt }] };
        }

        try {
            const response = await fetch(GEMINI_API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            if (!response.ok) {
                console.error("Gemini API Error:", response.status, await response.text());
                return null;
            }
            const data = await response.json();
            return data.candidates?.[0]?.content?.parts?.[0]?.text || null;
        } catch (error) {
            console.error("Error calling Gemini API:", error);
            return null;
        }
    }

    // --- DATABASE & ASYNC HELPERS ---
    async function fetchUserProfile(userId) { const { data } = await db.from('profiles').select('*').eq('id', userId).single(); return data; }
    async function fetchUserResults(userId) { const { data } = await db.from('quiz_results').select('*').eq('user_id', userId).order('created_at', { ascending: false }); return data; }
    async function fetchUserFriends(userId) { const { data } = await db.from('friends').select('profiles:user_id_2(id, username)').eq('user_id_1', userId); return data ? data.map(item => item.profiles) : []; }
    async function checkFriendship(userId1, userId2) { const { data } = await db.from('friends').select('user_id_1').match({ user_id_1: userId1, user_id_2: userId2 }).single(); return !!data; }
    async function addXp(amount) { if (!localUserProfile) return; const newXp = localUserProfile.xp + amount; const { data } = await db.from('profiles').update({ xp: newXp }).eq('id', currentUser.id).select().single(); if (data) localUserProfile = data; }
    async function updateDailyStreak() { const today = new Date().toISOString().slice(0, 10); const yesterday = new Date(); yesterday.setDate(yesterday.getDate() - 1); const yesterdayStr = yesterday.toISOString().slice(0, 10); let newStreak = 1; if (localUserProfile.last_daily_completion === yesterdayStr) { newStreak = localUserProfile.daily_streak + 1; } const { data } = await db.from('profiles').update({ daily_streak: newStreak, last_daily_completion: today }).eq('id', currentUser.id).select().single(); if (data) localUserProfile = data; }

    // --- UTILITY FUNCTIONS ---
    function showToast(message, type = 'success') { const container = document.getElementById('toast-container'); const toast = document.createElement('div'); toast.className = `toast ${type}`; toast.textContent = message; container.appendChild(toast); setTimeout(() => toast.remove(), 5000); }
    function showButtonSpinner(button) { button.disabled = true; button.innerHTML = `<div class="spinner button-spinner"></div>`; }
    function hideButtonSpinner(button, text) { button.disabled = false; button.innerHTML = text; }
    function getSettings() { return JSON.parse(localStorage.getItem('settings')) || { theme: 'dark', adsEnabled: true }; }
    function saveSettings(settings) { localStorage.setItem('settings', JSON.stringify(settings)); }
    function applySettings() { const settings = getSettings(); document.body.className = settings.theme + '-theme'; document.body.classList.toggle('ads-enabled', settings.adsEnabled); }
    function updateAuthState() { const authLinks = document.getElementById('auth-links'); const userSession = document.getElementById('user-session'); if (currentUser) { authLinks.classList.add('hidden'); userSession.classList.remove('hidden'); document.getElementById('profile-link').textContent = localUserProfile?.username || 'Profile'; } else { authLinks.classList.remove('hidden'); userSession.classList.add('hidden'); } }
    const XP_FOR_LEVEL = (level) => Math.floor(100 * Math.pow(level - 1, 1.5));
    function calculateLevel(xp) { let level = 1; while (xp >= XP_FOR_LEVEL(level + 1)) { level++; } return level; }
    function updateLevelAndXp(xp) { const level = calculateLevel(xp); const currentLevelXp = XP_FOR_LEVEL(level); const nextLevelXp = XP_FOR_LEVEL(level + 1); const xpIntoLevel = xp - currentLevelXp; const xpNeeded = nextLevelXp - currentLevelXp; document.getElementById('level-display').textContent = `Level ${level}`; document.getElementById('xp-bar').style.width = `${(xpIntoLevel / xpNeeded) * 100}%`; document.getElementById('xp-text').textContent = `${xpIntoLevel} / ${xpNeeded} XP`; }
    function updateProgressBar() { const progress = ((quizState.currentQuestionIndex) / quizState.questions.length) * 100; const quizContainer = mainContainer.querySelector('.page.active'); if (!quizContainer || !quizContainer.querySelector('#progress-bar')) return; quizContainer.querySelector('#progress-bar').style.width = `${progress}%`; }
    function resetFormulateUI(container) { container.querySelector('#standard-answers').classList.remove('hidden'); container.querySelector('#formulate-input-area').classList.add('hidden'); }
    function toggleFormulateUI() { const quizContainer = mainContainer.querySelector('.page.active'); const promptEl = quizContainer.querySelector('#formulate-prompt'); if (promptEl) promptEl.classList.add('hidden'); quizContainer.querySelector('#standard-answers').classList.toggle('hidden'); quizContainer.querySelector('#formulate-input-area').classList.toggle('hidden'); }
    function analyzeText(text) { text = text.toLowerCase(); let score = 0; analysisKeywords.agree.forEach(word => { if (text.includes(word)) score++; }); analysisKeywords.disagree.forEach(word => { if (text.includes(word)) score--; }); let strength = 1.0; analysisKeywords.strong.forEach(word => { if (text.includes(word)) strength = 1.5; }); if (strength === 1.0) { analysisKeywords.weak.forEach(word => { if (text.includes(word)) strength = 0.5; }); } if (score > 0) return strength; if (score < 0) return -strength; return strength === 0.5 ? 0.0 : 0.5; }
    function findClosestIdeology(userScores) { const userScoresConverted = { econ: (userScores.econ - 50) * 2, dipl: (userScores.dipl - 50) * 2, govt: (userScores.govt - 50) * 2, scty: (userScores.scty - 50) * 2 }; let closestMatch = null; let minDistance = Infinity; ideologies.forEach(ideology => { const dist = Math.sqrt( Math.pow(userScoresConverted.econ - ideology.scores.econ, 2) + Math.pow(userScoresConverted.dipl - ideology.scores.dipl, 2) + Math.pow(userScoresConverted.govt - ideology.scores.govt, 2) + Math.pow(userScoresConverted.scty - ideology.scores.scty, 2) ); if (dist < minDistance) { minDistance = dist; closestMatch = ideology; } }); return closestMatch; }
    function showCaptcha() { const code = Math.random().toString(36).substring(2, 8).toUpperCase(); quizState.captchaCode = code; document.getElementById('captcha-code').textContent = code; document.getElementById('captcha-input').value = ''; document.getElementById('captcha-error').textContent = ''; showModal('captcha-modal'); }
    function verifyCaptcha() { const input = document.getElementById('captcha-input').value.toUpperCase(); if (input === quizState.captchaCode) { quizState.lastAnswers = []; hideModals(); processAnswer(0); } else { document.getElementById('captcha-error').textContent = 'Incorrect code. Please try again.'; showCaptcha(); } }
    function createResultsHTML(ideology) { return ` <div class="results-grid"> <div class="results-chart"><canvas id="resultsChart"></canvas></div> <div class="results-summary"><h3>Closest Match: <span id="ideology-match">${ideology.name}</span></h3><p>Your views align most closely with this ideology.</p><button id="explain-btn" class="big-btn" data-ideology="${ideology.name}">✨ Explain My Ideology</button><div id="ideology-explanation" class="hidden"></div></div> </div> <div id="axis-details"></div> <button id="save-results-btn" class="big-btn hidden">Save Results to Profile</button> <button class="big-btn" data-page="quiz">Take Again</button>`; }
    function renderAxisDetails(percentages) { document.getElementById('axis-details').innerHTML = ` <div class="axis"><div class="axis-labels"><span>Equality</span><span>Economic</span><span>Markets</span></div><div class="result-bar-container"><div style="width:${percentages.econ}%; background: linear-gradient(to left, var(--agree-strong), var(--disagree-strong)); height: 100%; border-radius: 5px;"></div></div></div> <div class="axis"><div class="axis-labels"><span>World</span><span>Diplomatic</span><span>Nation</span></div><div class="result-bar-container"><div style="width:${percentages.dipl}%; background: linear-gradient(to left, #5bc0de, #f0ad4e); height: 100%; border-radius: 5px;"></div></div></div> <div class="axis"><div class="axis-labels"><span>Liberty</span><span>Civil</span><span>Authority</span></div><div class="result-bar-container"><div style="width:${percentages.govt}%; background: linear-gradient(to left, var(--disagree-strong), var(--agree-strong)); height: 100%; border-radius: 5px;"></div></div></div> <div class="axis"><div class="axis-labels"><span>Progress</span><span>Societal</span><span>Tradition</span></div><div class="result-bar-container"><div style="width:${percentages.scty}%; background: linear-gradient(to left, #5bc0de, #f0ad4e); height: 100%; border-radius: 5px;"></div></div></div> `; }
    function renderRadarChart(canvas, percentages, instanceVar) { if (!canvas) return; const ctx = canvas.getContext('2d'); if (chartInstances[instanceVar]) chartInstances[instanceVar].destroy(); const isDarkTheme = getSettings().theme === 'dark'; const gridColor = isDarkTheme ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.1)'; const labelColor = isDarkTheme ? '#e0e0e0' : '#333'; const data = { labels: [`Econ: ${percentages.econ.toFixed(1)}%`, `Dipl: ${percentages.dipl.toFixed(1)}%`, `Govt: ${percentages.govt.toFixed(1)}%`, `Scty: ${percentages.scty.toFixed(1)}%`], datasets: [{ label: 'Your Score', data: [percentages.econ, percentages.dipl, percentages.govt, percentages.scty], fill: true, backgroundColor: 'rgba(0, 170, 255, 0.2)', borderColor: 'rgb(0, 170, 255)', pointBackgroundColor: 'rgb(0, 170, 255)', pointBorderColor: '#fff' }] }; chartInstances[instanceVar] = new Chart(ctx, { type: 'radar', data, options: { scales: { r: { angleLines: { color: gridColor }, grid: { color: gridColor }, pointLabels: { color: labelColor, font: { size: 11 } }, min: 0, max: 100, ticks: { display: false } } }, plugins: { legend: { display: false } } } }); }
    function renderHistoryChart(canvas, results) { if (!canvas) return; const ctx = canvas.getContext('2d'); if (chartInstances.historyChart) chartInstances.historyChart.destroy(); const isDarkTheme = getSettings().theme === 'dark'; const gridColor = isDarkTheme ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.1)'; const labelColor = isDarkTheme ? '#e0e0e0' : '#333'; const labels = results.map(r => new Date(r.created_at).toLocaleDateString()).reverse(); const datasets = [ { label: 'Economic', data: results.map(r => r.econ_score).reverse(), borderColor: 'var(--disagree-strong)', tension: 0.1, fill: false }, { label: 'Diplomatic', data: results.map(r => r.dipl_score).reverse(), borderColor: '#f0ad4e', tension: 0.1, fill: false }, { label: 'Civil', data: results.map(r => r.govt_score).reverse(), borderColor: 'var(--agree-strong)', tension: 0.1, fill: false }, { label: 'Societal', data: results.map(r => r.scty_score).reverse(), borderColor: '#5bc0de', tension: 0.1, fill: false } ]; chartInstances.historyChart = new Chart(ctx, { type: 'line', data: { labels, datasets }, options: { scales: { y: { min: 0, max: 100, grid: { color: gridColor }, ticks: { color: labelColor } }, x: { grid: { color: gridColor }, ticks: { color: labelColor } } }, plugins: { legend: { labels: { color: labelColor } } } } }); }

    // ===================================================================================
    // --- INITIALIZATION ---
    // ===================================================================================
    async function init() {
        attachEventListeners();
        db.auth.onAuthStateChange(async (event, session) => {
            const previousUser = currentUser?.id;
            await handleAuthChange(session);
            if (event === "PASSWORD_RECOVERY") showModal('change-password-modal');
            else if ((event === "SIGNED_IN" && previousUser !== session?.user?.id) || event === "SIGNED_OUT") navigate('home');
        });
        const { data: { session } } = await db.auth.getSession();
        await handleAuthChange(session);
        applySettings();
        handleRouteChange();
        window.addEventListener('hashchange', handleRouteChange);
    }

    init();
});

